#!/bin/bash
# vim:sw=2:ts=2:sts=2:et
set -e
source "/.rediswarm"

ME=$(basename "$0")
SCRIPT_DIR=$(dirname "$0")
RANDOM_SEED=30

function entrypoint_log() {
    if [ -z "${REDIS_QUIET_LOGS:-}" ]; then
        echo "$@"
    fi
}

function wait_for_sentinel() {
    local _timeout=${1:-15}
    entrypoint_log "$ME: Attempting to contact existing Sentinel: "
    if wait-for-it -t ${_timeout} -h ${REDIS_SENTINEL_ADDR} -p ${REDIS_SENTINEL_PORT}; then
        entrypoint_log "$ME: Sentinel is available!"
        return 0
    else
        entrypoint_log "$ME: No existing Sentinel node found!"
        return 1
    fi
}

function run_sentinel() {
    local _tmp_lock=$((RANDOM % RANDOM_SEED))
    local _sentry_generate_conf=true
    local template_file="/etc/redis/templates/sentinel.conf.template"
    local config_file="${REDIS_CONFIG_PATH}/sentinel.conf"
    local filter=""

    entrypoint_log "$ME: Sentinel startup lock for ${_tmp_lock} seconds..."
    sleep ${_tmp_lock}

    # Attempt to connect to existing Sentinel
    # If we can't connect, we are the first node
    if wait_for_sentinel; then
        sleep ${_tmp_lock}

        # If we can connect, we are not the first
        # node, so we need to wait for the available sentinel to response
        while true; do
            _tmp_master=$(redis-cli -h ${REDIS_SENTINEL_ADDR} -p ${REDIS_SENTINEL_PORT} --csv SENTINEL get-master-addr-by-name mymaster | tr ',' ' ' | cut -d' ' -f1)
            if [[ -n ${_tmp_master} ]]; then
                REDIS_PRIMARY_ADDR="${_tmp_master//\"}"

                entrypoint_log "$ME: Identified primary node: \"${REDIS_PRIMARY_ADDR}\""
                
                while true; do
                    entrypoint_log "$ME: Trying to contact to primary node..."
                    export REDISCLI_AUTH=${REDISWARM_SECRET}
                    if redis-cli -h ${REDIS_PRIMARY_ADDR} -p ${REDIS_PRIMARY_PORT} INFO 2>&1 /dev/null; then
                        unset REDISCLI_AUTH
                        export REDIS_PRIMARY_ADDR
                        entrypoint_log "$ME: Connected to primary node!"
                        break
                    fi

                    entrypoint_log "$ME: Connecting to primary failed.  Waiting..."
                    sleep 5
                done
                break
            fi

            entrypoint_log "$ME: Connecting to sentinel failed.  Waiting..."
            sleep 5
        done
    else
        # We are the first running instance
        # Check if config file already exists
        if [[ -f "$config_file" ]]; then
            # We are the first running instance and config file already exists
            _sentry_generate_conf=false
            entrypoint_log "$ME: An existing Sentinel config found. Auto-configure [DISABLED]!"
        else
            # We are the first running instance and config file does not exist
            # Set the "${REDIS_HOSTNAME_PREFIX}1" as primary node
            export REDIS_PRIMARY_ADDR="${REDIS_HOSTNAME_PREFIX}1"
            entrypoint_log "$ME: Bootstrapping Sentinel!"
            entrypoint_log "$ME: Auto-configuring \"${REDIS_PRIMARY_ADDR}\" as primary node!"
        fi
    fi

    # Generate sentinel.conf
    if [[ "${_sentry_generate_conf}" == true ]]; then
        local defined_envs
        defined_envs=$(printf '${%s} ' $(awk "END { for (name in ENVIRON) { print ( name ~ /${filter}/ ) ? name : \"\" } }" < /dev/null ))

        entrypoint_log "$ME: Running envsubst on $template_file to $config_file"
        envsubst "$defined_envs" < "$template_file" > "$config_file"
    fi

    entrypoint_log "$ME: Starting Sentinel..."
    redis-sentinel "$config_file"
}

function run_redis() {
    local template_file="/etc/redis/templates/redis.conf.template"
    local config_file="${REDIS_CONFIG_PATH}/redis.conf"
    local filter=""

    # Connect to Sentinel and request for primary node
    if wait_for_sentinel 0; then
        while true; do
            _tmp_master=$(redis-cli -h ${REDIS_SENTINEL_ADDR} -p ${REDIS_SENTINEL_PORT} --csv SENTINEL get-master-addr-by-name mymaster | tr ',' ' ' | cut -d' ' -f1)
            if [[ -n ${_tmp_master} ]]; then
                REDIS_PRIMARY_ADDR="${_tmp_master//\"}"

                entrypoint_log "$ME: Identified primary node: \"${REDIS_PRIMARY_ADDR}\""

                # Check if we are the primary node
                if [[ "$(hostname)" == "${REDIS_PRIMARY_ADDR}" ]]; then
                    export REDIS_PRIMARY_ADDR
                    export REDIS_CONF_REPLICAOF=""
                    entrypoint_log "$ME: Sentinel set me \"${REDIS_PRIMARY_ADDR}\" as the primary node!"
                elif [[ "$(hostname -i)" == "${REDIS_PRIMARY_ADDR}" ]]; then
                    export REDIS_PRIMARY_ADDR
                    export REDIS_CONF_REPLICAOF=""
                    entrypoint_log "$ME: Sentinel set me \"${REDIS_PRIMARY_ADDR}\" as the primary node!"
                else
                    while true; do
                        entrypoint_log "$ME: Trying to contact with primary node..."
                        export REDISCLI_AUTH=${REDISWARM_SECRET}
                        entrypoint_log "$ME: Authenticating with primary node..."
                        if redis-cli -h ${REDIS_PRIMARY_ADDR} -p ${REDIS_PRIMARY_PORT} INFO 2>&1 /dev/null; then
                            unset REDISCLI_AUTH
                            export REDIS_PRIMARY_ADDR
                            export REDIS_CONF_REPLICAOF="replicaof ${REDIS_PRIMARY_ADDR} ${REDIS_PRIMARY_PORT}"
                            entrypoint_log "$ME: Connected to primary node!"
                            break
                        fi

                        entrypoint_log "$ME: Connecting to primary failed.  Waiting..."
                        sleep 5
                    done
                fi

                break
            fi

            entrypoint_log "$ME: Connecting to sentinel failed.  Waiting..."
            sleep 5
        done
    fi

    # Generate redis.conf
    local defined_envs
    defined_envs=$(printf '${%s} ' $(awk "END { for (name in ENVIRON) { print ( name ~ /${filter}/ ) ? name : \"\" } }" < /dev/null ))

    entrypoint_log "$ME: Running envsubst on $template_file to $config_file"
    envsubst "$defined_envs" < "$template_file" > "$config_file"

    entrypoint_log "$ME: Starting Redis..."
    redis-server "$config_file"
}

# banner
cat "${SCRIPT_DIR}/banner.txt"

# print environment variables
echo "- REDISWARM_MODE=${REDISWARM_MODE}"
echo "- REDISWARM_SLOT=${REDISWARM_SLOT}"
echo ""

redis-server --version
echo ""


if [[ "${REDISWARM_MODE}" == "sentinel" ]]; then
    run_sentinel
    exit 0
fi

if [[ "${REDISWARM_MODE}" == "redis" ]]; then
    run_redis
    exit 0
fi
